{"version":3,"sources":["util.js","Main.js","registerServiceWorker.js","index.js"],"names":["RenderNumber","props","number_bar","i","push","className","key","onClick","evt","numberClick","RenderStar","star_html","limit","ResultNumber","numberResult","console","log","resultBar","forEach","obj","Main","state","initialState","randomNumber","Math","floor","random","baseState","bind","resetForm","this","selectedNumber","sum","isCorrect","count","setState","length","window","alert","isCountCorrect","timeInterval","timer","setInterval","clearInterval","type","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dde584a8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const RenderNumber = props => {\r\n  let number_bar = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    number_bar.push(\r\n      <span className=\"numberCircle\" key={\"bar\" + i} onClick={(evt)=>{props.numberClick(i+1)}}>\r\n        {i + 1}\r\n      </span>\r\n    );\r\n  }\r\n  return <div className=\"input-container\"> {number_bar}</div>;\r\n};\r\n\r\n\r\nexport const RenderStar = props =>{\r\n    let star_html = [];\r\n    for(let i=0;i<props.limit;i++)\r\n    {\r\n        star_html.push( <span className=\"glyphicon glyphicon-star\" key={\"star\"+i} />)\r\n    }\r\n    return <div className=\"star-container\">{star_html}</div>\r\n}\r\nexport const ResultNumber = props =>{\r\n\r\n    let numberResult = [];\r\n    console.log(props);\r\n    props && props.resultBar.forEach((obj,i)=>{\r\n        numberResult.push( <span className=\"numberCircle\" key={\"star\"+i}>{obj}</span>)\r\n    })\r\n\r\n    return <div className=\"number-container\">{numberResult}</div>\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {RenderNumber,RenderStar,ResultNumber} from \"./util\";\r\n\r\nimport './App.css';\r\n//{this.setInterval()}\r\nclass Main extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state=this.initialState();\r\n        this.randomNumber = Math.floor(Math.random()*(15-1+1)+1);\r\n        this.baseState = this.state;    \r\n        this.numberClick = this.numberClick.bind(this);\r\n        this.resetForm=this.resetForm.bind(this);\r\n        this.initialState =this.initialState.bind(this);\r\n    }\r\n    initialState(){\r\n        this.randomNumber = Math.floor(Math.random()*(15-1+1)+1);\r\n        return {\r\n            selectedNumber:[],\r\n            sum:0,\r\n            isCorrect:''\r\n        };\r\n\r\n    }\r\n    isCountCorrect(count){\r\n        return this.randomNumber===(this.state.sum + count)\r\n    }\r\n    resetForm(){\r\n        this.setState(this.initialState);\r\n    }\r\n    numberClick(evt){\r\n        const {selectedNumber,sum}=this.state;\r\n        \r\n        if(selectedNumber.length>15)\r\n        {\r\n            window.alert(\"You have crossed maximum number of trials, Please reset the form\")\r\n            return false;\r\n        }\r\n        selectedNumber.push(evt);\r\n        let isCorrect =this.isCountCorrect(evt);\r\n        this.setState({\r\n            selectedNumber:selectedNumber,\r\n            sum:sum+evt,\r\n            isCorrect:isCorrect\r\n        });\r\n    }\r\n    setInterval(){\r\n       let timeInterval = 10; \r\n       let {resetForm} = this;\r\n       let timer = window.setInterval(function(){\r\n            timeInterval--;\r\n            console.log(timeInterval);\r\n            if(timeInterval<=0)\r\n            {\r\n                clearInterval(timer);\r\n                resetForm();\r\n            }\r\n       },1000)\r\n    }\r\n  render() {\r\n    const {isCorrect,sum} =this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div>\r\n            Counting Stars\r\n            <button type=\"button\" className={sum===0 ? \"btn btn-primary disabled\" : \"btn btn-primary\"} onClick={this.resetForm}>Reset</button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-5\">\r\n            <RenderStar limit={this.randomNumber}/>\r\n          </div>\r\n          <div className=\"col-lg-2\">\r\n                {(sum>0)? <div className={(!!isCorrect)? \"glyphicon glyphicon-ok result-container\" :\"glyphicon glyphicon-remove result-container\"}/> : <div className=\"equalSign result-container\">=</div> }\r\n          </div>\r\n          <div className=\"col-lg-5\">\r\n            <ResultNumber resultBar={this.state.selectedNumber}/>\r\n          </div>\r\n        </div>\r\n        {<RenderNumber numberClick={this.numberClick}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from \"./Main\";\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}